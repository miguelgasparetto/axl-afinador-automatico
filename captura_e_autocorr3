#define SAMPLES 128
#define SIN_IN 2
#define FREQ_IN 82

//dados ideais da onda de entrada 
float period_in = (1.0/FREQ_IN)*1000000.0; // em microssegundos
float period_sam = 1.5*period_in;
float gap = period_sam/SAMPLES;

char amostra[SAMPLES], amostrax[2*SAMPLES];
int trigger = 3;
int debounce = 1;
int i, j;
long int corr;
int num_corr;
int state = 0;
int freq;
unsigned long timer;

void setup() {
  Serial.begin(115200);
  pinMode(trigger, INPUT_PULLUP);
  pinMode(SIN_IN, INPUT);
}

void captura()
{
  for(i=0; i<SAMPLES; i++)
  {
    amostra[i] = digitalRead(SIN_IN); 
    delayMicroseconds(gap); 
  }
}

void printar_amostra()
{
  for(i=0; i<SAMPLES; i++)
    Serial.println(amostra[i]); 
  Serial.println(-5);
}

void comparacao()
{
  corr = 0;
  for(i=0; i<(2*SAMPLES); i++)
  {
    amostrax[i] = digitalRead(SIN_IN);
    delayMicroseconds(gap);
  }
  for(i=0; i < (SAMPLES*4); i++)
  {
    for(j=0; j < SAMPLES; j++)
    {
        corr += 
    }
  }
  
  Serial.println(corr);
}

void det_freq()
{
  if((corr > 80) && (state == 0))
  {
    num_corr = 0;
    state = 1;
  }
  if((corr > 80) && (state == 2))
  {
    timer = num_corr*SAMPLES*gap;
    state = 0;
    //Serial.println(timer);
  }
  else
  {
    num_corr ++;
  }
}

void loop()
{
  if(!digitalRead(trigger) && debounce)
  {
    captura();
    printar_amostra();
    debounce =0;
  }
  if(digitalRead(trigger) && !debounce)
    debounce = 1;
  
  comparacao();
  det_freq();
}
