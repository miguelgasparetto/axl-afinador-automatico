/*
 * AXL - AFINADOR AUTOMÁTICO
 * Projeto desevolvido por Miguel Gasparetto e Leonardo Strechar 
 * Eletrônica Aplicada - UTFPR - 2018
 * Versão 13.12.18.0
*/
#include <arduinoFFT.h>
#include <LiquidCrystal.h>
#include <Stepper.h>

#define STEPS 100
#define DIR 3
#define SEL 2
#define ESQ 1
/*
Pinos
ESQ 1
SEL 2
DIR 3
*/

int nav, escala, desafinado;
boolean sel;
boolean debouncedir = false;
boolean debounceesq = false;
boolean debouncesel = false;

arduinoFFT FFT = arduinoFFT();
Stepper stepper(STEPS, 4, 5, 6, 7);
/*                     
Pinos
IN 1  7
IN 2  6
IN 3  5
IN 4  4
*/
LiquidCrystal lcd(13, 12, 11, 10, 9, 8);
/*
Pinos
RS     13
Enable 12
DB4    11
DB5    10
DB6    9
DB7    8
*/

byte SETACIMA[8] = {
  B00100,
  B01110,
  B10101,
  B00100,
  B00100,
  B00000,
  B00000,
  B00000,
};

byte SETABAIXO[8] = {
  B00000,
  B00000,
  B00000,
  B00100,
  B00100,
  B10101,
  B01110,
  B00100,
};

byte SETADIR[8] = {
  B00000,
  B00100,
  B00010,
  B11111,
  B00010,
  B00100,
  B00000,
  B00000,
};

byte SETAVOLTA[8] = {
  B00000,
  B01000,
  B11110,
  B01001,
  B00001,
  B11110,
  B00000,
  B00000,
};

byte SETAVOLTAneg[8] = {
  B11111,
  B10111,
  B00001,
  B10110,
  B11110,
  B00001,
  B11111,
  B11111,
};

void telacontagem()
{
  lcd.home();
  lcd.print("Toque em");
  lcd.setCursor(0,1);
  delay(1000);
  for(int i = 3; i>0; i--){
    lcd.print(i);
    delay(250);
    lcd.print(".");
    delay(250);
    lcd.print(".");
    delay(250);
    lcd.print(".");
    delay(250);
  }
  lcd.clear();
  lcd.setCursor(6,0);
  lcd.print("NOW!");
}

void trespontos(int lin, int col)
{
  lcd.setCursor(lin, col);
  lcd.print(".");
  delay(1000);
  lcd.print(".");
  delay(1000);
  lcd.print(".");
  delay(1000);
}

void tela1(){
  lcd.clear();
  lcd.home();
  lcd.print("Selecione o tipo");
  lcd.setCursor(2, 1);
  lcd.print("de afinacao:");
  delay(1000);
}

void telaafinacao(){
  sel = false;
  nav = 0;
  while(!sel)
  {
    switch(nav){
      case 0: // nav:0 padrao
       lcd.home();
       lcd.write(2);
       lcd.print("Padrao");
       lcd.setCursor(15,0);
       lcd.write(byte(0));
       lcd.setCursor(0,1);
       lcd.print("1/2 Tom Abaixo");
       lcd.setCursor(15,1);
       lcd.write(byte(1));
      break;
      case 1: // nav1: meio abaixo
       lcd.home();
       lcd.print("Padrao");
       lcd.setCursor(15,0);
       lcd.write(byte(0));
       lcd.setCursor(0,1);
       lcd.write(2);
       lcd.print("1/2 Tom Abaixo");
       lcd.setCursor(15,1);
       lcd.write(byte(1));
      break;
      case 2: //nav2: personalizado
       lcd.home();
       lcd.write(2);
       lcd.print("Personalizado");
       lcd.setCursor(15,0);
       lcd.write(byte(0));
       lcd.setCursor(0,1);
       lcd.print("Criar Nova");
       lcd.setCursor(15,1);
       lcd.write(byte(1));
      break;
      case 3: //nav3: criar nova
       lcd.home(); 
       lcd.print("Personalizado");
       lcd.setCursor(15,0);
       lcd.write(byte(0));
       lcd.setCursor(0,1);
       lcd.write(2);
       lcd.print("Criar Nova");
       lcd.setCursor(15,1);
       lcd.write(byte(1));
      break;
      default:
      break;
    }
    if(!digitalRead(ESQ) && !debounceesq){
      debounceesq = true;
      if(nav > 0)
        nav--;
      lcd.clear();
    }
    if(!digitalRead(DIR) && !debouncedir){
      debouncedir = true;
      if(nav < 3)
        nav++;
      lcd.clear();
    }
    if(!digitalRead(SEL) && !debouncesel){
      debouncesel = true;
      sel = true;
    }
    
    if(digitalRead(ESQ) && (debounceesq == true))
      debounceesq = false;
    if(digitalRead(DIR) && (debouncedir == true))
      debouncedir = false;
    if(digitalRead(SEL) && (debouncesel == true))
      debouncesel = false;
  }
}

int padrao (){
  int detfreq;
  nav = 0;
  sel = false;
  while(!sel){
    lcd.home();
    lcd.print("Escolha a corda");
    lcd.setCursor(0,1);
    switch(nav){
      case 0:
      lcd.write(byte(2)); // setadir
      lcd.print("E A D G B e");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 82;
      break;
      case 1:
      lcd.print(" E");
      lcd.write(byte(2));
      lcd.print("A D G B e");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 110;
      break;
      case 2:
      lcd.print(" E A");
      lcd.write(byte(2)); 
      lcd.print("D G B e");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 147;
      break;
      case 3:
      lcd.print(" E A D");
      lcd.write(byte(2));
      lcd.print("G B e");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 196;
      break;
      case 4:
      lcd.print(" E A D G");
      lcd.write(byte(2));
      lcd.print("B e");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 247;
      break;
      case 5:
      lcd.print(" E A D G B");
      lcd.write(byte(2));
      lcd.print("e");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 330;
      break;
      case 6:
      lcd.print(" E A D G B e");
      lcd.setCursor(15,1);
      lcd.write(byte(4));
      break;
      
      default:
      break;
    }
    if(!digitalRead(ESQ) && !debounceesq){
      debounceesq = true;
      if(nav > 0)
        nav--;
      lcd.clear();
    }
    if(!digitalRead(DIR) && !debouncedir){
      debouncedir = true;
      if(nav < 6)
        nav++;
      lcd.clear();
    }
    if(!digitalRead(SEL) && !debouncesel){
      debouncesel = true;
      sel = true;
    }
   
    if(digitalRead(ESQ) && (debounceesq == true))
      debounceesq = false;
    if(digitalRead(DIR) && (debouncedir == true))
      debouncedir = false;
    if(digitalRead(SEL) && (debouncesel == true))
      debouncesel = false;
  }
  if(nav == 6)
    return 666;
  return detfreq;
}

int meioabaixo(){
  int detfreq;
  nav = 0;
  sel = false;
  while(!sel){
    lcd.home();
    lcd.print("Escolha a corda");
    lcd.setCursor(0,1);
    switch(nav){
      case 0:
      lcd.write(byte(2)); // setadir
      lcd.print("D#A#F#C#G#D#");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 77;
      break;
      case 1:
      lcd.print("D#");
      lcd.write(byte(2));
      lcd.print("A#F#C#G#D#");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 103;
      break;
      case 2:
      lcd.print("D#A#");
      lcd.write(byte(2)); 
      lcd.print("F#C#G#D#");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 138;
      break;
      case 3:
      lcd.print("D#A#F#");
      lcd.write(byte(2));
      lcd.print("C#G#D#");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 185;
      break;
      case 4:
      lcd.print("D#A#F#C#");
      lcd.write(byte(2));
      lcd.print("G#D#");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 233;
      break;
      case 5:
      lcd.print("D#A#F#C#G#");
      lcd.write(byte(2));
      lcd.print("D#");
      lcd.setCursor(15,1);
      lcd.write(byte(3));
      detfreq = 311;
      break;
      case 6:
      lcd.print("D#A#F#C#G#D#");
      lcd.setCursor(15,1);
      lcd.write(byte(4));
      break;
      
      default:
      break;
    }
    if(!digitalRead(ESQ) && !debounceesq){
      debounceesq = true;
      if(nav > 0)
        nav--;
      lcd.clear();
    }
    if(!digitalRead(DIR) && !debouncedir){
      debouncedir = true;
      if(nav < 6)
        nav++;
      lcd.clear();
    }
    if(!digitalRead(SEL) && !debouncesel){
      debouncesel = true;
      sel = true;
    }
   
    if(digitalRead(ESQ) && (debounceesq == true))
      debounceesq = false;
    if(digitalRead(DIR) && (debouncedir == true))
      debouncedir = false;
    if(digitalRead(SEL) && (debouncesel == true))
      debouncesel = false;
  }
  if(nav == 6)
    return 666;
  return detfreq;
}

void telaprenda(){
  sel = 0;
  debouncesel = true;
  lcd.home();
  lcd.print("Fixe o AXL");
  lcd.setCursor(0,1);
  lcd.print("na tarraxa ");
  lcd.write(2);
  lcd.print("OK!");
  delay(1000);
  while(!sel){
    if(!digitalRead(SEL) && (debouncesel == true))
      debouncesel = false;
    if(digitalRead(SEL) && (debouncesel == false))
      sel = 1;
  }
}

int leitura(int freqafinado, int repete)
{
  const uint8_t samples = 128; //This value MUST ALWAYS be a power of 2 
  int samplingFrequency, memoria[repete],i,k, freqcorrigida, margem;
                    //D, G, B e                                        
  double fator[4] = {24236 , 1.499, 81880.5, 0.8912};
                     //E, A nao precisam de fator
  double fatormeio[6] = {1.032, 1.026, 24053.4, 0.794, 78404.5, 0.947};
  boolean saida = false;
 
  for(k=0;k<repete;k++)
    memoria[k] = k;
  
  switch(freqafinado){
    //padrao
    case 82:
      samplingFrequency = 240;
    break;
    case 110:
      samplingFrequency = 318;
    break;
    case 146:
      samplingFrequency = 438;
    break;
    case 196:
      samplingFrequency = 588;
    break;
    case 247:
      samplingFrequency = 741;
    break;
    case 330:
      samplingFrequency = 990;
    break;
    //meiotomabaixo
    case 77:
      samplingFrequency = 231;
    break;
    case 103:
      samplingFrequency = 309;
    break;
    case 138:
      samplingFrequency = 414;
    break;
    case 185:
      samplingFrequency = 555;
    break;
    case 233:
      samplingFrequency = 699;
    break;
    case 311:
      samplingFrequency = 933;
    break;
    default:
    break;
  }
  double vReal[samples];
  double vImag[samples];
  float gap = (1.0/samplingFrequency)*1000.0;
  while(saida == false){
    //capturando amostra em vReal
    for (i = 0; i < samples; i++)
    {
      vReal[i] = int8_t(analogRead(0)/8);
      delay(gap);
      vImag[i] = 0.0; //Imaginary part must be zeroed in case of looping to avoid wrong calculations and overflows
    }
    //computando FFT: resultados em vReal
    FFT.Windowing(vReal, samples, FFT_WIN_TYP_HAMMING, FFT_FORWARD);  /* Weigh data */
    FFT.Compute(vReal, vImag, samples, FFT_FORWARD); /* Compute FFT */
    FFT.ComplexToMagnitude(vReal, vImag, samples); /* Compute magnitudes */
    double x = FFT.MajorPeak(vReal, samples, samplingFrequency);
    
    //fator de correcao
    if(freqafinado == 82){
      freqcorrigida = x;
      margem = 25;
    }
    if(freqafinado == 110){
      freqcorrigida = x;
      margem = 50;
    }
    if(freqafinado == 146){
       freqcorrigida = fator[0]/x;
       margem = 25;
    }
    if(freqafinado == 196){
       freqcorrigida = fator[1]*x;
       margem = 15;
    }
    if(freqafinado == 247){
       freqcorrigida = fator[2]/x;
       margem = 50;
    }
    if(freqafinado == 330){
       freqcorrigida = fator[3]*x;
       margem = 50;
    }
    //meio tom
    if(freqafinado == 77){
      freqcorrigida = fatormeio[0]*x;
      margem = 25;
    }
    if(freqafinado == 103){
      freqcorrigida = fatormeio[1]*x;
      margem = 50;
    }
    if(freqafinado == 138){
       freqcorrigida = fatormeio[2]/x;
       margem = 25;
    }
    if(freqafinado == 185){
       freqcorrigida = fatormeio[3]*x;
       margem = 15;
    }
    if(freqafinado == 233){
       freqcorrigida = fatormeio[4]/x;
       margem = 50;
    }
    if(freqafinado == 311){
       freqcorrigida = fatormeio[5]*x;
       margem = 50;
    }
    //Serial.println(freqcorrigida);
    //desloca frequencias anteriores
    for(i=(repete-1);i>0;i--)
      memoria[i]=memoria[i-1];
    
    memoria[0]=freqcorrigida;
    
    int somadamemoria = 0;

    for(i = 0; i<repete; i++)
    {
      if((memoria[i]>(freqafinado-margem))&&(memoria[i]<(freqafinado+margem)))
        somadamemoria++;
      else
        somadamemoria--;
    }
    if(somadamemoria == repete)
      saida = true;
    
    if(!digitalRead(SEL))
      return freqafinado;
      
  }
  return memoria[3];
}

void setup() {
  pinMode(DIR, INPUT_PULLUP);
  pinMode(SEL, INPUT_PULLUP);
  pinMode(ESQ, INPUT_PULLUP);
  pinMode(A0, INPUT);

  stepper.setSpeed(30);
  
  lcd.begin(16,2);//inicializa display
  lcd.createChar(0, SETACIMA); // associa imagem ao 0
  lcd.createChar(1, SETABAIXO); // ''
  lcd.createChar(2, SETADIR);
  lcd.createChar(3, SETAVOLTA);
  lcd.createChar(4, SETAVOLTAneg);

  lcd.home();
  lcd.clear();
  lcd.print("Iniciando");
  trespontos(9,0);
  lcd.clear();
  lcd.setCursor(6,0);
  lcd.print("AXL");
  delay(2000);
}

void loop() {
  tela1();
  lcd.clear();
  telaafinacao(); //nav0: padrao / nav1: tom abaixo / nav2: personalizado / nav3: criar nova
  lcd.clear();
  switch(nav){
  case 0:
    //escala eh a frequencia desejada
    escala = padrao();
    if(escala == 666)
      break;
    lcd.clear();
    telaprenda();
    lcd.clear();
    desafinado = 0;
    while(desafinado != escala)
    {
      //pede pra tocar
      lcd.clear();
      lcd.home();
      telacontagem();
      delay(100);
      if(escala == 146)
        desafinado = leitura(escala, 4); //limite repete: 4
      else
        desafinado = leitura(escala, 10);
      lcd.setCursor(6,1);
      lcd.print(desafinado);
      lcd.print("Hz");
      delay(500);
      int diferenca = (desafinado-escala);
      diferenca = diferenca*100;
      if(escala>desafinado){
       for(int d = diferenca;d<0;d++){
         stepper.step(-1);
         if(!digitalRead(SEL)){
          d=1;
          desafinado = escala;
         }
       }
      }
      if(escala<desafinado){
       for(int d = diferenca;d>0;d--){
         stepper.step(1);
         if(!digitalRead(SEL)){
           d=1;
           desafinado = escala;
         }
       }
      }
    }
    lcd.clear();
    lcd.home();
    lcd.print("Pronto!");
    lcd.setCursor(0, 1);
    lcd.print("Corda afinada!");
    delay(2000);
  break;
  case 1:
  //escala eh a frequencia desejada
    escala = meioabaixo();
    if(escala == 666)
      break;
    lcd.clear();
    
    telaprenda();
    
    lcd.clear();
    desafinado = 0;
    
    while(desafinado != escala)
    {
      //pede pra tocar
      lcd.clear();
      lcd.home();
      telacontagem();
      delay(100);
      
      if(escala == 138)
        desafinado = leitura(escala, 4); //limite repete: 4
      else
        desafinado = leitura(escala, 10);
      
      lcd.setCursor(6,1);
      lcd.print(desafinado);
      lcd.print("Hz");
      delay(500);
      int diferenca = (desafinado-escala);
      diferenca = diferenca*100;
      if(escala>desafinado){
       for(int d = diferenca;d<0;d++){
         stepper.step(-1);
         if(!digitalRead(SEL)){
          d=1;
          desafinado = escala;
         }
       }
      }
      if(escala<desafinado){
       for(int d = diferenca;d>0;d--){
         stepper.step(1);
         if(!digitalRead(SEL)){
           d=1;
           desafinado = escala;
         }
       }
      }
    }
    lcd.clear();
    lcd.home();
    lcd.print("Pronto!");
    lcd.setCursor(0, 1);
    lcd.print("Corda afinada!");
    delay(2000);
  break;
  case 2:
  break;
  case 3:
  break;
  default:
  break;
  }
}
